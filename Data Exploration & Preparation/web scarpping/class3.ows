<?xml version='1.0' encoding='utf-8'?>
<scheme version="2.0" title="" description="">
	<nodes>
		<node id="0" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Python Script" position="(179.0, 210.0)" />
		<node id="1" name="Data Table" qualified_name="Orange.widgets.data.owtable.OWDataTable" project_name="Orange3" version="" title="Data Table" position="(337.0, 157.0)" />
		<node id="2" name="Save Data" qualified_name="Orange.widgets.data.owsave.OWSave" project_name="Orange3" version="" title="Save Data" position="(450.0, 128.0)" />
	</nodes>
	<links>
		<link id="0" source_node_id="0" sink_node_id="1" source_channel="Data" sink_channel="Data" enabled="true" />
		<link id="1" source_node_id="1" sink_node_id="2" source_channel="Selected Data" sink_channel="Data" enabled="true" />
	</links>
	<annotations />
	<thumbnail />
	<node_properties>
		<properties node_id="0" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 0, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x07\x86\xff\xff\xff\xbb\x00\x00\x0c&gt;\x00\x00\x04:\x00\x00\x07\x86\xff\xff\xff\xd7\x00\x00\x0c&gt;\x00\x00\x04:\x00\x00\x00\x01\x00\x00\x00\x00\n\x00\x00\x00\x07\x86\xff\xff\xff\xd7\x00\x00\x0c&gt;\x00\x00\x04:', 'scriptLibrary': [], 'scriptText': 'from lxml import etree\nimport requests\nfrom bs4 import BeautifulSoup as bs\nfrom Orange.data import *\n\n\ndef getContent(link: str) -&gt; str:\n    webPage = requests.get(link)\n    return str(bs(webPage.content, "html.parser"))\n\n\ncontent: str = getContent("https://en.wikipedia.org/wiki/List_of_international_airports_by_country")\nhtml: etree.ElementBase = etree.HTML(content)\n\nprint(html)\n\nRELATIVE_ROOT: str = "//div[(@id=\'mw-content-text\')]/div"\nallNodes = html.xpath(RELATIVE_ROOT+"/*")\nh2Count: int = 0\ndata = [[]]\ni: int = 0\nlength: int = len(allNodes)\n\ncurrentRegion: str = ""\ncurrentSubRegion: str = ""\ncurrentCountry: str = ""\n\nwhile i &lt; length:\n    node: etree.ElementBase = allNodes[i]\n    if node.tag == \'h2\' and h2Count != 0:\n        currentRegion = node.xpath("./span[@class=\'mw-headline\'][1]")[0].text\n\n    elif node.tag == \'h2\':\n        h2Count += 1\n        i += 1\n        continue\n    if node.tag == \'h3\':\n        if i+1 &lt; length:\n            nextNode = allNodes[i + 1]\n            if nextNode.tag == \'table\':\n                currentCountry = node.xpath("normalize-space(.//text())")\n                currentSubRegion = \'\'\n            elif nextNode.tag == \'h4\':\n                currentSubRegion = node.xpath("normalize-space(.//text())")\n    if node.tag == \'h4\':\n        currentCountry = node.xpath("normalize-space(.//text())")\n    if node.tag == \'table\' and node.attrib[\'class\'] == "wikitable":\n        lines = node.xpath("./tbody/tr")\n        for line in lines:\n            cells = line.xpath("./td//text()")\n            if len(cells) == 0:\n                continue\n            dataLine = [currentRegion, currentSubRegion, currentCountry]\n            dataLine = ["N/A" if x == \'\' else x for x in dataLine]\n            for cell in cells:\n                if cell.strip() != \'\':\n                    dataLine.append(cell.strip())\n            \n            data.append(dataLine)\n    i += 1\ndata=data[1:] # remove first empty column\nRegion = StringVariable(\'Region\')\nSubRegion = StringVariable(\'SubRegion\')\nCountry = StringVariable(\'Country\')\nCity = StringVariable(\'City\')\nAirport = StringVariable(\'Airport name\')\nCode = StringVariable(\'IATA Code\')\n\n\ndomain=Domain([], metas=[Region, SubRegion, Country, City,Airport,Code])\ntable = Table.from_list(domain, data)\nout_data=table\n', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\xab\x00\x00\x00k\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
		<properties node_id="1" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'dist_color_RGB': (220, 220, 220, 255), 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x06\xfc\xff\xff\xff}\x00\x00\x0c\x9a\x00\x00\x02\xe6\x00\x00\x06\xfc\xff\xff\xff\x99\x00\x00\x0c\x9a\x00\x00\x02\xe6\x00\x00\x00\x01\x00\x00\x00\x00\n\x00\x00\x00\x06\xfc\xff\xff\xff\x99\x00\x00\x0c\x9a\x00\x00\x02\xe6', 'select_rows': True, 'selected_cols': [], 'selected_rows': [], 'show_attribute_labels': True, 'show_distributions': False, '__version__': 2}</properties>
		<properties node_id="2" format="literal">{'add_type_annotations': True, 'auto_save': False, 'controlAreaVisible': True, 'filter': 'Comma-separated values (*.csv)', 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x07\x81\x00\x00\x01\x8e\x00\x00\to\x00\x00\x020\x00\x00\x07\x81\x00\x00\x01\xaa\x00\x00\to\x00\x00\x020\x00\x00\x00\x01\x00\x00\x00\x00\n\x00\x00\x00\x07\x81\x00\x00\x01\xaa\x00\x00\to\x00\x00\x020', 'stored_name': 'List-of-intrnational-airports-by-country.csv', 'stored_path': '.', '__version__': 2}</properties>
	</node_properties>
	<session_state>
		<window_groups />
	</session_state>
</scheme>
